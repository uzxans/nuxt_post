{"version":3,"sources":["../../../src/checkers/oxlint/diagnostics.ts"],"sourcesContent":["import { parentPort } from 'node:worker_threads'\nimport { FileDiagnosticManager } from '../../FileDiagnosticManager.js'\nimport {\n  composeCheckerSummary,\n  consoleLog,\n  diagnosticToConsoleLevel,\n  diagnosticToRuntimeError,\n  diagnosticToTerminalLog,\n  type NormalizedDiagnostic,\n  toClientPayload,\n} from '../../logger.js'\nimport {\n  ACTION_TYPES,\n  type CreateDiagnostic,\n  DiagnosticLevel,\n} from '../../types.js'\nimport { resolveOptions } from './options.js'\nimport { setupDevServer } from './server.js'\nimport type { DisplayTarget } from './types'\n\nexport const createDiagnostic: CreateDiagnostic<'oxlint'> = (pluginConfig) => {\n  const manager = new FileDiagnosticManager()\n\n  const oxlintConfig = pluginConfig.oxlint\n  const displayTargets = new Set<DisplayTarget>()\n\n  return {\n    config: async ({ enableOverlay, enableTerminal }) => {\n      displayTargets.clear()\n      if (enableOverlay) displayTargets.add('overlay')\n      if (enableTerminal) displayTargets.add('terminal')\n    },\n    async configureServer({ root }) {\n      if (!oxlintConfig) return\n\n      const options = resolveOptions(root, oxlintConfig)\n      await setupDevServer(root, options, manager, displayTargets)\n    },\n  }\n}\n\nexport function dispatchDiagnostics(\n  diagnostics: NormalizedDiagnostic[],\n  targets: Set<DisplayTarget>,\n) {\n  if (targets.size === 0) return\n\n  if (targets.has('terminal')) {\n    dispatchTerminalDiagnostics(diagnostics)\n  }\n  if (targets.has('overlay')) {\n    dispatchOverlayDiagnostics(diagnostics)\n  }\n}\n\nfunction dispatchTerminalDiagnostics(diagnostics: NormalizedDiagnostic[]) {\n  for (const d of diagnostics) {\n    consoleLog(\n      diagnosticToTerminalLog(d, 'oxlint'),\n      diagnosticToConsoleLevel(d),\n    )\n  }\n\n  const errorCount = diagnostics.filter(\n    (d) => d.level === DiagnosticLevel.Error,\n  ).length\n  const warningCount = diagnostics.filter(\n    (d) => d.level === DiagnosticLevel.Warning,\n  ).length\n  consoleLog(\n    composeCheckerSummary('oxlint', errorCount, warningCount),\n    errorCount ? 'error' : warningCount ? 'warn' : 'info',\n  )\n}\n\nfunction dispatchOverlayDiagnostics(diagnostics: NormalizedDiagnostic[]) {\n  parentPort?.postMessage({\n    type: ACTION_TYPES.overlayError,\n    payload: toClientPayload(\n      'oxlint',\n      diagnostics.map((d) => diagnosticToRuntimeError(d)),\n    ),\n  })\n}\n"],"mappings":"AAAA,SAAS,kBAAkB;AAC3B,SAAS,6BAA6B;AACtC;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,OACK;AACP;AAAA,EACE;AAAA,EAEA;AAAA,OACK;AACP,SAAS,sBAAsB;AAC/B,SAAS,sBAAsB;AAGxB,MAAM,mBAA+C,CAAC,iBAAiB;AAC5E,QAAM,UAAU,IAAI,sBAAsB;AAE1C,QAAM,eAAe,aAAa;AAClC,QAAM,iBAAiB,oBAAI,IAAmB;AAE9C,SAAO;AAAA,IACL,QAAQ,OAAO,EAAE,eAAe,eAAe,MAAM;AACnD,qBAAe,MAAM;AACrB,UAAI,cAAe,gBAAe,IAAI,SAAS;AAC/C,UAAI,eAAgB,gBAAe,IAAI,UAAU;AAAA,IACnD;AAAA,IACA,MAAM,gBAAgB,EAAE,KAAK,GAAG;AAC9B,UAAI,CAAC,aAAc;AAEnB,YAAM,UAAU,eAAe,MAAM,YAAY;AACjD,YAAM,eAAe,MAAM,SAAS,SAAS,cAAc;AAAA,IAC7D;AAAA,EACF;AACF;AAEO,SAAS,oBACd,aACA,SACA;AACA,MAAI,QAAQ,SAAS,EAAG;AAExB,MAAI,QAAQ,IAAI,UAAU,GAAG;AAC3B,gCAA4B,WAAW;AAAA,EACzC;AACA,MAAI,QAAQ,IAAI,SAAS,GAAG;AAC1B,+BAA2B,WAAW;AAAA,EACxC;AACF;AAEA,SAAS,4BAA4B,aAAqC;AACxE,aAAW,KAAK,aAAa;AAC3B;AAAA,MACE,wBAAwB,GAAG,QAAQ;AAAA,MACnC,yBAAyB,CAAC;AAAA,IAC5B;AAAA,EACF;AAEA,QAAM,aAAa,YAAY;AAAA,IAC7B,CAAC,MAAM,EAAE,UAAU,gBAAgB;AAAA,EACrC,EAAE;AACF,QAAM,eAAe,YAAY;AAAA,IAC/B,CAAC,MAAM,EAAE,UAAU,gBAAgB;AAAA,EACrC,EAAE;AACF;AAAA,IACE,sBAAsB,UAAU,YAAY,YAAY;AAAA,IACxD,aAAa,UAAU,eAAe,SAAS;AAAA,EACjD;AACF;AAEA,SAAS,2BAA2B,aAAqC;AA3EzE;AA4EE,0CAAY,YAAY;AAAA,IACtB,MAAM,aAAa;AAAA,IACnB,SAAS;AAAA,MACP;AAAA,MACA,YAAY,IAAI,CAAC,MAAM,yBAAyB,CAAC,CAAC;AAAA,IACpD;AAAA,EACF;AACF;","names":[]}