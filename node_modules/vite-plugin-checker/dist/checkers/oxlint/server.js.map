{"version":3,"sources":["../../../src/checkers/oxlint/server.ts"],"sourcesContent":["import path from 'node:path'\nimport chokidar from 'chokidar'\nimport type { FileDiagnosticManager } from '../../FileDiagnosticManager.js'\nimport { filterLogLevel } from '../../logger.js'\nimport { runOxlint } from './cli.js'\nimport { dispatchDiagnostics } from './diagnostics.js'\nimport type { ResolvedOptions } from './options.js'\nimport type { DisplayTarget } from './types'\n\nexport async function setupDevServer(\n  root: string,\n  options: ResolvedOptions,\n  manager: FileDiagnosticManager,\n  displayTargets: Set<DisplayTarget>,\n): Promise<void> {\n  const initial = await runOxlint(options.command, root)\n  manager.initWith(initial)\n  dispatchDiagnostics(\n    filterLogLevel(manager.getDiagnostics(), options.logLevel),\n    displayTargets,\n  )\n\n  const watcher = chokidar.watch(options.watchTarget, {\n    cwd: root,\n    ignored: (path: string) => path.includes('node_modules'),\n  })\n\n  watcher.on('change', async (filePath) => {\n    await handleFileChange(root, options.command, filePath, manager)\n    dispatchDiagnostics(\n      filterLogLevel(manager.getDiagnostics(), options.logLevel),\n      displayTargets,\n    )\n  })\n\n  watcher.on('unlink', (filePath) => {\n    handleFileUnlink(root, filePath, manager)\n    dispatchDiagnostics(\n      filterLogLevel(manager.getDiagnostics(), options.logLevel),\n      displayTargets,\n    )\n  })\n\n  watcher.add('.')\n}\n\nfunction handleFileUnlink(\n  root: string,\n  filePath: string,\n  manager: FileDiagnosticManager,\n) {\n  const absPath = path.resolve(root, filePath)\n  manager.updateByFileId(absPath, [])\n}\n\nasync function handleFileChange(\n  root: string,\n  command: string,\n  filePath: string,\n  manager: FileDiagnosticManager,\n) {\n  const absPath = path.resolve(root, filePath)\n\n  const isConfigFile = path.basename(absPath) === '.oxlintrc.json'\n  if (isConfigFile) {\n    const diagnostics = await runOxlint(`${command} ${root}`, root)\n    manager.initWith(diagnostics)\n  } else {\n    const diagnostics = await runOxlint(`${command} ${absPath}`, root)\n    manager.updateByFileId(absPath, diagnostics)\n  }\n}\n"],"mappings":"AAAA,OAAO,UAAU;AACjB,OAAO,cAAc;AAErB,SAAS,sBAAsB;AAC/B,SAAS,iBAAiB;AAC1B,SAAS,2BAA2B;AAIpC,eAAsB,eACpB,MACA,SACA,SACA,gBACe;AACf,QAAM,UAAU,MAAM,UAAU,QAAQ,SAAS,IAAI;AACrD,UAAQ,SAAS,OAAO;AACxB;AAAA,IACE,eAAe,QAAQ,eAAe,GAAG,QAAQ,QAAQ;AAAA,IACzD;AAAA,EACF;AAEA,QAAM,UAAU,SAAS,MAAM,QAAQ,aAAa;AAAA,IAClD,KAAK;AAAA,IACL,SAAS,CAACA,UAAiBA,MAAK,SAAS,cAAc;AAAA,EACzD,CAAC;AAED,UAAQ,GAAG,UAAU,OAAO,aAAa;AACvC,UAAM,iBAAiB,MAAM,QAAQ,SAAS,UAAU,OAAO;AAC/D;AAAA,MACE,eAAe,QAAQ,eAAe,GAAG,QAAQ,QAAQ;AAAA,MACzD;AAAA,IACF;AAAA,EACF,CAAC;AAED,UAAQ,GAAG,UAAU,CAAC,aAAa;AACjC,qBAAiB,MAAM,UAAU,OAAO;AACxC;AAAA,MACE,eAAe,QAAQ,eAAe,GAAG,QAAQ,QAAQ;AAAA,MACzD;AAAA,IACF;AAAA,EACF,CAAC;AAED,UAAQ,IAAI,GAAG;AACjB;AAEA,SAAS,iBACP,MACA,UACA,SACA;AACA,QAAM,UAAU,KAAK,QAAQ,MAAM,QAAQ;AAC3C,UAAQ,eAAe,SAAS,CAAC,CAAC;AACpC;AAEA,eAAe,iBACb,MACA,SACA,UACA,SACA;AACA,QAAM,UAAU,KAAK,QAAQ,MAAM,QAAQ;AAE3C,QAAM,eAAe,KAAK,SAAS,OAAO,MAAM;AAChD,MAAI,cAAc;AAChB,UAAM,cAAc,MAAM,UAAU,GAAG,OAAO,IAAI,IAAI,IAAI,IAAI;AAC9D,YAAQ,SAAS,WAAW;AAAA,EAC9B,OAAO;AACL,UAAM,cAAc,MAAM,UAAU,GAAG,OAAO,IAAI,OAAO,IAAI,IAAI;AACjE,YAAQ,eAAe,SAAS,WAAW;AAAA,EAC7C;AACF;","names":["path"]}